{"version":3,"file":"drawers.min.js","sources":["../src/drawers.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Toggling the visibility of the secondary navigation on mobile.\n *\n * @module     theme_boost/drawers\n * @copyright  2021 Bas Brands\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport ModalBackdrop from \"core/modal_backdrop\";\nimport Templates from \"core/templates\";\nimport * as Aria from \"core/aria\";\nimport { dispatchEvent } from \"core/event_dispatcher\";\nimport { debounce } from \"core/utils\";\nimport Pending from \"core/pending\";\n// The jQuery module is only used for interacting with Boostrap 4. It can we removed when MDL-71979 is integrated.\nimport jQuery from \"jquery\";\n\nlet backdropPromise = null;\n\nconst drawerMap = new Map();\n\nconst SELECTORS = {\n  BUTTONS: '[data-toggler=\"drawers\"]',\n  CLOSEBTN: '[data-toggler=\"drawers\"][data-action=\"closedrawer\"]',\n  OPENBTN: '[data-toggler=\"drawers\"][data-action=\"opendrawer\"]',\n  TOGGLEBTN: '[data-toggler=\"drawers\"][data-action=\"toggle\"]',\n  DRAWERS: '[data-region=\"fixed-drawer\"]',\n  CONTAINER: \"#page.drawers\",\n  DRAWERCONTENT: \".drawercontent\",\n};\n\nconst CLASSES = {\n  SCROLLED: \"scrolled\",\n  SHOW: \"show\",\n  NOTINITIALISED: \"not-initialized\",\n  TOGGLERIGHT: \".drawer-right-toggle\",\n};\n\n/**\n * Maximum sizes for breakpoints. This needs to correspond with Bootstrap\n * Breakpoints\n *\n * @private\n */\nconst sizes = {\n  medium: 991,\n  large: 1400,\n};\n\n/**\n * Get the current body width.\n *\n * @returns {number} the current body width.\n * @private\n */\nconst getCurrentWidth = () => {\n  const DomRect = document.body.getBoundingClientRect();\n  return DomRect.x + DomRect.width;\n};\n\n/**\n * Check if the user uses a small size browser.\n *\n * @returns {boolean} true if the body is smaller than sizes.medium max size.\n * @private\n */\nconst isSmall = () => {\n  const browserWidth = getCurrentWidth();\n  return browserWidth < sizes.medium;\n};\n\n/**\n * Check if the user uses a large size browser.\n *\n * @returns {boolean} true if the body is smaller than sizes.large max size.\n * @private\n */\nconst isLarge = () => {\n  const browserWidth = getCurrentWidth();\n  return browserWidth >= sizes.large;\n};\n\n/**\n * Add a backdrop to the page.\n *\n * @returns {Promise} rendering of modal backdrop.\n * @private\n */\nconst getBackdrop = () => {\n  if (!backdropPromise) {\n    backdropPromise = Templates.render(\"core/modal_backdrop\", {})\n      .then((html) => new ModalBackdrop(html))\n      .then((modalBackdrop) => {\n        modalBackdrop\n          .getAttachmentPoint()\n          .get(0)\n          .addEventListener(\"click\", (e) => {\n            e.preventDefault();\n            Drawers.closeAllDrawers();\n          });\n        return modalBackdrop;\n      })\n      .catch();\n  }\n  return backdropPromise;\n};\n\n/**\n * Get the button element to open a specific drawer.\n *\n * @param {String} drawerId the drawer element Id\n * @return {HTMLElement|undefined} the open button element\n * @private\n */\nconst getDrawerOpenButton = (drawerId) => {\n  let openButton = document.querySelector(`${SELECTORS.OPENBTN}[data-target=\"${drawerId}\"]`);\n  if (!openButton) {\n    openButton = document.querySelector(`${SELECTORS.TOGGLEBTN}[data-target=\"${drawerId}\"]`);\n  }\n  return openButton;\n};\n\n/**\n * Disable drawer tooltips.\n *\n * @param {HTMLElement} drawerNode the drawer main node\n * @private\n */\nconst disableDrawerTooltips = (drawerNode) => {\n  const buttons = [drawerNode.querySelector(SELECTORS.CLOSEBTN), getDrawerOpenButton(drawerNode.id)];\n  buttons.forEach((button) => {\n    if (!button) {\n      return;\n    }\n    disableButtonTooltip(button);\n  });\n};\n\n/**\n * Disable the button tooltips.\n *\n * @param {HTMLElement} button the button element\n * @param {boolean} enableOnBlur if the tooltip must be re-enabled on blur.\n * @private\n */\nconst disableButtonTooltip = (button, enableOnBlur) => {\n  if (button.hasAttribute(\"data-original-title\")) {\n    // The jQuery is still used in Boostrap 4. It can we removed when MDL-71979 is integrated.\n    jQuery(button).tooltip(\"disable\");\n    button.setAttribute(\"title\", button.dataset.originalTitle);\n  } else {\n    button.dataset.disabledToggle = button.dataset.toggle;\n    button.removeAttribute(\"data-toggle\");\n  }\n  if (enableOnBlur) {\n    button.dataset.restoreTooltipOnBlur = true;\n  }\n};\n\n/**\n * Enable drawer tooltips.\n *\n * @param {HTMLElement} drawerNode the drawer main node\n * @private\n */\nconst enableDrawerTooltips = (drawerNode) => {\n  const buttons = [drawerNode.querySelector(SELECTORS.CLOSEBTN), getDrawerOpenButton(drawerNode.id)];\n  buttons.forEach((button) => {\n    if (!button) {\n      return;\n    }\n    enableButtonTooltip(button);\n  });\n};\n\n/**\n * Enable the button tooltips.\n *\n * @param {HTMLElement} button the button element\n * @private\n */\nconst enableButtonTooltip = (button) => {\n  // The jQuery is still used in Boostrap 4. It can we removed when MDL-71979 is integrated.\n  if (button.hasAttribute(\"data-original-title\")) {\n    jQuery(button).tooltip(\"enable\");\n    button.removeAttribute(\"title\");\n  } else if (button.dataset.disabledToggle) {\n    button.dataset.toggle = button.dataset.disabledToggle;\n    jQuery(button).tooltip();\n  }\n  delete button.dataset.restoreTooltipOnBlur;\n};\n\n/**\n * Add scroll listeners to a drawer element.\n *\n * @param {HTMLElement} drawerNode the drawer main node\n * @private\n */\nconst addInnerScrollListener = (drawerNode) => {\n  const content = drawerNode.querySelector(SELECTORS.DRAWERCONTENT);\n  if (!content) {\n    return;\n  }\n  content.addEventListener(\"scroll\", () => {\n    drawerNode.classList.toggle(CLASSES.SCROLLED, content.scrollTop != 0);\n  });\n};\n\n/**\n * The Drawers class is used to control on-screen drawer elements.\n *\n * It handles opening, and closing of drawer elements, as well as more detailed behaviours such as closing a drawer when\n * another drawer is opened, and supports closing a drawer when the screen is resized.\n *\n * Drawers are instantiated on page load, and can also be toggled lazily when toggling any drawer toggle, open button,\n * or close button.\n *\n * A range of show and hide events are also dispatched as detailed in the class\n * {@link module:theme_boost/drawers#eventTypes eventTypes} object.\n *\n * @example <caption>Standard usage</caption>\n *\n * // The module just needs to be included to add drawer support.\n * import 'theme_boost/drawers';\n *\n * @example <caption>Manually open or close any drawer</caption>\n *\n * import Drawers from 'theme_boost/drawers';\n *\n * const myDrawer = Drawers.getDrawerInstanceForNode(document.querySelector('.myDrawerNode');\n * myDrawer.closeDrawer();\n *\n * @example <caption>Listen to the before show event and cancel it</caption>\n *\n * import Drawers from 'theme_boost/drawers';\n *\n * document.addEventListener(Drawers.eventTypes.drawerShow, e => {\n *     // The drawer which will be shown.\n *     window.console.log(e.target);\n *\n *     // The instance of the Drawers class for this drawer.\n *     window.console.log(e.detail.drawerInstance);\n *\n *     // Prevent this drawer from being shown.\n *     e.preventDefault();\n * });\n *\n * @example <caption>Listen to the shown event</caption>\n *\n * document.addEventListener(Drawers.eventTypes.drawerShown, e => {\n *     // The drawer which was shown.\n *     window.console.log(e.target);\n *\n *     // The instance of the Drawers class for this drawer.\n *     window.console.log(e.detail.drawerInstance);\n * });\n */\nexport default class Drawers {\n  /**\n   * The underlying HTMLElement which is controlled.\n   */\n  drawerNode = null;\n\n  constructor(drawerNode) {\n    this.drawerNode = drawerNode;\n\n    if (isSmall()) {\n      this.closeDrawer({ focusOnOpenButton: false, updatePreferences: false });\n    }\n\n    if (this.drawerNode.classList.contains(CLASSES.SHOW)) {\n      this.openDrawer({ focusOnCloseButton: false });\n    } else if (this.drawerNode.dataset.forceopen == 1) {\n      if (!isSmall()) {\n        this.openDrawer({ focusOnCloseButton: false });\n      }\n    } else {\n      Aria.hide(this.drawerNode);\n    }\n\n    // Disable tooltips in small screens.\n    if (isSmall()) {\n      disableDrawerTooltips(this.drawerNode);\n    }\n\n    addInnerScrollListener(this.drawerNode);\n\n    drawerMap.set(drawerNode, this);\n\n    drawerNode.classList.remove(CLASSES.NOTINITIALISED);\n  }\n\n  /**\n   * Whether the drawer is open.\n   *\n   * @returns {boolean}\n   */\n  get isOpen() {\n    return this.drawerNode.classList.contains(CLASSES.SHOW);\n  }\n\n  /**\n   * Whether the drawer should close when the window is resized\n   *\n   * @returns {boolean}\n   */\n  get closeOnResize() {\n    return !!parseInt(this.drawerNode.dataset.closeOnResize);\n  }\n\n  /**\n   * The list of event types.\n   *\n   * @static\n   * @property {String} drawerShow See {@link event:theme_boost/drawers:show}\n   * @property {String} drawerShown See {@link event:theme_boost/drawers:shown}\n   * @property {String} drawerHide See {@link event:theme_boost/drawers:hide}\n   * @property {String} drawerHidden See {@link event:theme_boost/drawers:hidden}\n   */\n  static eventTypes = {\n    /**\n     * An event triggered before a drawer is shown.\n     *\n     * @event theme_boost/drawers:show\n     * @type {CustomEvent}\n     * @property {HTMLElement} target The drawer that will be opened.\n     */\n    drawerShow: \"theme_boost/drawers:show\",\n\n    /**\n     * An event triggered after a drawer is shown.\n     *\n     * @event theme_boost/drawers:shown\n     * @type {CustomEvent}\n     * @property {HTMLElement} target The drawer that was be opened.\n     */\n    drawerShown: \"theme_boost/drawers:shown\",\n\n    /**\n     * An event triggered before a drawer is hidden.\n     *\n     * @event theme_boost/drawers:hide\n     * @type {CustomEvent}\n     * @property {HTMLElement} target The drawer that will be hidden.\n     */\n    drawerHide: \"theme_boost/drawers:hide\",\n\n    /**\n     * An event triggered after a drawer is hidden.\n     *\n     * @event theme_boost/drawers:hidden\n     * @type {CustomEvent}\n     * @property {HTMLElement} target The drawer that was be hidden.\n     */\n    drawerHidden: \"theme_boost/drawers:hidden\",\n  };\n\n  /**\n   * Get the drawer instance for the specified node\n   *\n   * @param {HTMLElement} drawerNode\n   * @returns {module:theme_boost/drawers}\n   */\n  static getDrawerInstanceForNode(drawerNode) {\n    if (!drawerMap.has(drawerNode)) {\n      new Drawers(drawerNode);\n    }\n\n    return drawerMap.get(drawerNode);\n  }\n\n  /**\n   * Dispatch a drawer event.\n   *\n   * @param {string} eventname the event name\n   * @param {boolean} cancelable if the event is cancelable\n   * @returns {CustomEvent} the resulting custom event\n   */\n  dispatchEvent(eventname, cancelable = false) {\n    return dispatchEvent(\n      eventname,\n      {\n        drawerInstance: this,\n      },\n      this.drawerNode,\n      {\n        cancelable,\n      }\n    );\n  }\n\n  /**\n   * Open the drawer.\n   *\n   * By default, openDrawer sets the page focus to the close drawer button. However, when a drawer is open at page\n   * load, this represents an accessibility problem as the initial focus changes without any user interaction. The\n   * focusOnCloseButton parameter can be set to false to prevent this behaviour.\n   *\n   * @param {object} args\n   * @param {boolean} [args.focusOnCloseButton=true] Whether to alter page focus when opening the drawer\n   */\n  openDrawer({ focusOnCloseButton = true } = {}) {\n    const pendingPromise = new Pending(\"theme_boost/drawers:open\");\n    const showEvent = this.dispatchEvent(Drawers.eventTypes.drawerShow, true);\n    if (showEvent.defaultPrevented) {\n      return;\n    }\n\n    // Hide close button while the drawer is showing to prevent glitchy effects.\n    this.drawerNode.querySelector(SELECTORS.CLOSEBTN)?.classList.toggle(\"hidden\", true);\n\n    // Remove open tooltip if still visible.\n    let openButton = getDrawerOpenButton(this.drawerNode.id);\n    if (openButton && openButton.hasAttribute(\"data-original-title\")) {\n      // The jQuery is still used in Boostrap 4. It can we removed when MDL-71979 is integrated.\n      jQuery(openButton)?.tooltip(\"hide\");\n    }\n\n    Aria.unhide(this.drawerNode);\n    this.drawerNode.classList.add(CLASSES.SHOW);\n\n    const preference = this.drawerNode.dataset.preference;\n    if (preference && !isSmall() && this.drawerNode.dataset.forceopen != 1) {\n      M.util.set_user_preference(preference, true);\n    }\n\n    const state = this.drawerNode.dataset.state;\n    if (state) {\n      const page = document.getElementById(\"page\");\n      page.classList.add(state);\n    }\n\n    if (isSmall()) {\n      getBackdrop()\n        .then((backdrop) => {\n          backdrop.show();\n\n          const pageWrapper = document.getElementById(\"page\");\n          pageWrapper.style.overflow = \"hidden\";\n          return backdrop;\n        })\n        .catch();\n    }\n\n    // Show close button once the drawer is fully opened.\n    const closeButton = this.drawerNode.querySelector(SELECTORS.CLOSEBTN);\n    if (focusOnCloseButton && closeButton) {\n      disableButtonTooltip(closeButton, true);\n    }\n    setTimeout(() => {\n      closeButton.classList.toggle(\"hidden\", false);\n      if (focusOnCloseButton) {\n        closeButton.focus();\n      }\n      pendingPromise.resolve();\n    }, 300);\n\n    this.dispatchEvent(Drawers.eventTypes.drawerShown);\n  }\n\n  /**\n   * Close the drawer.\n   *\n   * @param {object} args\n   * @param {boolean} [args.focusOnOpenButton=true] Whether to alter page focus when opening the drawer\n   * @param {boolean} [args.updatePreferences=true] Whether to update the user prewference\n   */\n  closeDrawer({ focusOnOpenButton = true, updatePreferences = true } = {}) {\n    const pendingPromise = new Pending(\"theme_boost/drawers:close\");\n\n    const hideEvent = this.dispatchEvent(Drawers.eventTypes.drawerHide, true);\n    if (hideEvent.defaultPrevented) {\n      return;\n    }\n\n    // Hide close button while the drawer is hiding to prevent glitchy effects.\n    const closeButton = this.drawerNode.querySelector(SELECTORS.CLOSEBTN);\n    closeButton?.classList.toggle(\"hidden\", true);\n    // Remove the close button tooltip if visible.\n    if (closeButton.hasAttribute(\"data-original-title\")) {\n      // The jQuery is still used in Boostrap 4. It can we removed when MDL-71979 is integrated.\n      jQuery(closeButton)?.tooltip(\"hide\");\n    }\n\n    const preference = this.drawerNode.dataset.preference;\n    if (preference && updatePreferences && !isSmall()) {\n      M.util.set_user_preference(preference, false);\n    }\n\n    const state = this.drawerNode.dataset.state;\n    if (state) {\n      const page = document.getElementById(\"page\");\n      page.classList.remove(state);\n    }\n\n    Aria.hide(this.drawerNode);\n    this.drawerNode.classList.remove(CLASSES.SHOW);\n\n    getBackdrop()\n      .then((backdrop) => {\n        backdrop.hide();\n\n        if (isSmall()) {\n          const pageWrapper = document.getElementById(\"page\");\n          pageWrapper.style.overflow = \"auto\";\n        }\n        return backdrop;\n      })\n      .catch();\n\n    // Move focus to the open drawer (or toggler) button once the drawer is hidden.\n    let openButton = getDrawerOpenButton(this.drawerNode.id);\n    if (openButton) {\n      disableButtonTooltip(openButton, true);\n    }\n    setTimeout(() => {\n      if (openButton && focusOnOpenButton) {\n        openButton.focus();\n      }\n      pendingPromise.resolve();\n    }, 300);\n\n    this.dispatchEvent(Drawers.eventTypes.drawerHidden);\n  }\n\n  /**\n   * Toggle visibility of the drawer.\n   */\n  toggleVisibility() {\n    if (this.drawerNode.classList.contains(CLASSES.SHOW)) {\n      this.closeDrawer();\n    } else {\n      this.openDrawer();\n    }\n  }\n\n  /**\n   * Close all drawers.\n   */\n  static closeAllDrawers() {\n    drawerMap.forEach((drawerInstance) => {\n      drawerInstance.closeDrawer();\n    });\n  }\n\n  /**\n   * Close all drawers except for the specified drawer.\n   *\n   * @param {module:theme_boost/drawers} comparisonInstance\n   */\n  static closeOtherDrawers(comparisonInstance) {\n    drawerMap.forEach((drawerInstance) => {\n      if (drawerInstance === comparisonInstance) {\n        return;\n      }\n\n      drawerInstance.closeDrawer();\n    });\n  }\n}\n\n/**\n * Activate the scroller helper for the drawer layout.\n *\n * @private\n */\nconst scroller = () => {\n  const body = document.querySelector(\"body\");\n  const drawerLayout = document.querySelector(SELECTORS.CONTAINER);\n  if (drawerLayout) {\n    // If there is not visible scrollbar then remove extra margin from right drawer.\n    const drawerRight = document.querySelector(SELECTORS.CONTAINER + \" \" + CLASSES.TOGGLERIGHT);\n    if (!scrollbarVisible(drawerLayout) && drawerRight) {\n      drawerRight.style.marginRight = \"0\";\n    }\n    drawerLayout.addEventListener(\"scroll\", () => {\n      if (drawerLayout.scrollTop >= window.innerHeight) {\n        body.classList.add(CLASSES.SCROLLED);\n      } else {\n        body.classList.remove(CLASSES.SCROLLED);\n      }\n    });\n  }\n};\n\n/**\n * Check if there is a visible scrollbar in the given html element.\n *\n * @param {object} htmlNode The html element.\n * @returns {boolean} true if the scroll height is greater than client height.\n */\nconst scrollbarVisible = (htmlNode) => {\n  return htmlNode.scrollHeight > htmlNode.clientHeight;\n};\n\n/**\n * Set the last used attribute for the last used toggle button for a drawer.\n *\n * @param {object} toggleButton The clicked button.\n */\nconst setLastUsedToggle = (toggleButton) => {\n  if (toggleButton.dataset.target) {\n    document.querySelectorAll(`${SELECTORS.BUTTONS}[data-target=\"${toggleButton.dataset.target}\"]`).forEach((btn) => {\n      btn.dataset.lastused = false;\n    });\n    toggleButton.dataset.lastused = true;\n  }\n};\n\n/**\n * Set the focus to the last used button to open this drawer.\n * @param {string} target The drawer target.\n */\nconst focusLastUsedToggle = (target) => {\n  const lastUsedButton = document.querySelector(`${SELECTORS.BUTTONS}[data-target=\"${target}\"][data-lastused=\"true\"`);\n  if (lastUsedButton) {\n    lastUsedButton.focus();\n  }\n};\n\n/**\n * Register the event listeners for the drawer.\n *\n * @private\n */\nconst registerListeners = () => {\n  // Listen for show/hide events.\n  document.addEventListener(\"click\", (e) => {\n    const toggleButton = e.target.closest(SELECTORS.TOGGLEBTN);\n    if (toggleButton && toggleButton.dataset.target) {\n      e.preventDefault();\n      const targetDrawer = document.getElementById(toggleButton.dataset.target);\n      const drawerInstance = Drawers.getDrawerInstanceForNode(targetDrawer);\n      setLastUsedToggle(toggleButton);\n\n      drawerInstance.toggleVisibility();\n    }\n\n    const openDrawerButton = e.target.closest(SELECTORS.OPENBTN);\n    if (openDrawerButton && openDrawerButton.dataset.target) {\n      e.preventDefault();\n      const targetDrawer = document.getElementById(openDrawerButton.dataset.target);\n      const drawerInstance = Drawers.getDrawerInstanceForNode(targetDrawer);\n      setLastUsedToggle(toggleButton);\n\n      drawerInstance.openDrawer();\n    }\n\n    const closeDrawerButton = e.target.closest(SELECTORS.CLOSEBTN);\n    if (closeDrawerButton && closeDrawerButton.dataset.target) {\n      e.preventDefault();\n      const targetDrawer = document.getElementById(closeDrawerButton.dataset.target);\n      const drawerInstance = Drawers.getDrawerInstanceForNode(targetDrawer);\n\n      drawerInstance.closeDrawer();\n      focusLastUsedToggle(closeDrawerButton.dataset.target);\n    }\n  });\n\n  // Close drawer when another drawer opens.\n  document.addEventListener(Drawers.eventTypes.drawerShow, (e) => {\n    if (isLarge()) {\n      return;\n    }\n    Drawers.closeOtherDrawers(e.detail.drawerInstance);\n  });\n\n  // Tooglers and openers blur listeners.\n  const btnSelector = `${SELECTORS.TOGGLEBTN}, ${SELECTORS.OPENBTN}, ${SELECTORS.CLOSEBTN}`;\n  document.addEventListener(\"focusout\", (e) => {\n    const button = e.target.closest(btnSelector);\n    if (button?.dataset.restoreTooltipOnBlur !== undefined) {\n      enableButtonTooltip(button);\n    }\n  });\n\n  const closeOnResizeListener = () => {\n    if (isSmall()) {\n      let anyOpen = false;\n      drawerMap.forEach((drawerInstance) => {\n        disableDrawerTooltips(drawerInstance.drawerNode);\n        if (drawerInstance.isOpen) {\n          if (drawerInstance.closeOnResize) {\n            drawerInstance.closeDrawer();\n          } else {\n            anyOpen = true;\n          }\n        }\n      });\n\n      if (anyOpen) {\n        getBackdrop()\n          .then((backdrop) => backdrop.show())\n          .catch();\n      }\n    } else {\n      drawerMap.forEach((drawerInstance) => {\n        enableDrawerTooltips(drawerInstance.drawerNode);\n      });\n      getBackdrop()\n        .then((backdrop) => backdrop.hide())\n        .catch();\n    }\n  };\n\n  window.addEventListener(\"resize\", debounce(closeOnResizeListener, 400));\n};\n\nscroller();\nregisterListeners();\n\nconst drawers = document.querySelectorAll(SELECTORS.DRAWERS);\ndrawers.forEach((drawerNode) => Drawers.getDrawerInstanceForNode(drawerNode));\n"],"names":["backdropPromise","drawerMap","Map","SELECTORS","CLASSES","sizes","getCurrentWidth","DomRect","document","body","getBoundingClientRect","x","width","isSmall","getBackdrop","Templates","render","then","html","ModalBackdrop","modalBackdrop","getAttachmentPoint","get","addEventListener","e","preventDefault","Drawers","closeAllDrawers","catch","getDrawerOpenButton","drawerId","openButton","querySelector","disableDrawerTooltips","drawerNode","id","forEach","button","disableButtonTooltip","enableOnBlur","hasAttribute","tooltip","setAttribute","dataset","originalTitle","disabledToggle","toggle","removeAttribute","restoreTooltipOnBlur","enableButtonTooltip","constructor","closeDrawer","focusOnOpenButton","updatePreferences","this","classList","contains","openDrawer","focusOnCloseButton","forceopen","Aria","hide","content","scrollTop","addInnerScrollListener","set","remove","isOpen","closeOnResize","parseInt","drawerShow","drawerShown","drawerHide","drawerHidden","has","dispatchEvent","eventname","cancelable","drawerInstance","pendingPromise","Pending","eventTypes","defaultPrevented","unhide","add","preference","M","util","set_user_preference","state","getElementById","backdrop","show","style","overflow","closeButton","setTimeout","focus","resolve","toggleVisibility","comparisonInstance","scrollbarVisible","htmlNode","scrollHeight","clientHeight","setLastUsedToggle","toggleButton","target","querySelectorAll","btn","lastused","drawerLayout","drawerRight","marginRight","window","innerHeight","scroller","closest","targetDrawer","getDrawerInstanceForNode","openDrawerButton","closeDrawerButton","lastUsedButton","focusLastUsedToggle","closeOtherDrawers","detail","btnSelector","undefined","anyOpen","registerListeners"],"mappings":";;;;;;;y6BA+BIA,gBAAkB,WAEhBC,UAAY,IAAIC,IAEhBC,kBACK,2BADLA,mBAEM,sDAFNA,kBAGK,qDAHLA,oBAIO,iDAJPA,kBAKK,+BALLA,oBAMO,gBANPA,wBAOW,iBAGXC,iBACM,WADNA,aAEE,OAFFA,uBAGY,kBAHZA,oBAIS,uBASTC,aACI,IADJA,YAEG,KASHC,gBAAkB,WAChBC,QAAUC,SAASC,KAAKC,+BACvBH,QAAQI,EAAIJ,QAAQK,OASvBC,QAAU,IACOP,kBACCD,aAoBlBS,YAAc,KACbd,kBACHA,gBAAkBe,mBAAUC,OAAO,sBAAuB,IACvDC,MAAMC,MAAS,IAAIC,wBAAcD,QACjCD,MAAMG,gBACLA,cACGC,qBACAC,IAAI,GACJC,iBAAiB,SAAUC,IAC1BA,EAAEC,iBACFC,QAAQC,qBAELP,iBAERQ,SAEE5B,iBAUH6B,oBAAuBC,eACvBC,WAAavB,SAASwB,cAAe,GAAE7B,kCAAkC2B,qBACxEC,aACHA,WAAavB,SAASwB,cAAe,GAAE7B,oCAAoC2B,eAEtEC,YASHE,sBAAyBC,aACb,CAACA,WAAWF,cAAc7B,oBAAqB0B,oBAAoBK,WAAWC,KACtFC,SAASC,SACVA,QAGLC,qBAAqBD,YAWnBC,qBAAuB,CAACD,OAAQE,gBAChCF,OAAOG,aAAa,4CAEfH,QAAQI,QAAQ,WACvBJ,OAAOK,aAAa,QAASL,OAAOM,QAAQC,iBAE5CP,OAAOM,QAAQE,eAAiBR,OAAOM,QAAQG,OAC/CT,OAAOU,gBAAgB,gBAErBR,eACFF,OAAOM,QAAQK,sBAAuB,IA0BpCC,oBAAuBZ,SAEvBA,OAAOG,aAAa,4CACfH,QAAQI,QAAQ,UACvBJ,OAAOU,gBAAgB,UACdV,OAAOM,QAAQE,iBACxBR,OAAOM,QAAQG,OAAST,OAAOM,QAAQE,mCAChCR,QAAQI,kBAEVJ,OAAOM,QAAQK,4BAoEHtB,QAInBQ,WAAa,KAEbgB,YAAYhB,iBACLA,WAAaA,WAEdrB,gBACGsC,YAAY,CAAEC,mBAAmB,EAAOC,mBAAmB,IAG9DC,KAAKpB,WAAWqB,UAAUC,SAASpD,mBAChCqD,WAAW,CAAEC,oBAAoB,IACQ,GAArCJ,KAAKpB,WAAWS,QAAQgB,UAC5B9C,gBACE4C,WAAW,CAAEC,oBAAoB,IAGxCE,KAAKC,KAAKP,KAAKpB,YAIbrB,WACFoB,sBAAsBqB,KAAKpB,YApFDA,CAAAA,mBACxB4B,QAAU5B,WAAWF,cAAc7B,yBACpC2D,SAGLA,QAAQvC,iBAAiB,UAAU,KACjCW,WAAWqB,UAAUT,OAAO1C,iBAAuC,GAArB0D,QAAQC,eAiFtDC,CAAuBV,KAAKpB,YAE5BjC,UAAUgE,IAAI/B,WAAYoB,MAE1BpB,WAAWqB,UAAUW,OAAO9D,wBAQ1B+D,oBACKb,KAAKpB,WAAWqB,UAAUC,SAASpD,cAQxCgE,4BACOC,SAASf,KAAKpB,WAAWS,QAAQyB,iCAYxB,CAQlBE,WAAY,2BASZC,YAAa,4BASbC,WAAY,2BASZC,aAAc,8DASgBvC,mBACzBjC,UAAUyE,IAAIxC,iBACbR,QAAQQ,YAGPjC,UAAUqB,IAAIY,YAUvByC,cAAcC,eAAWC,0EAChB,mCACLD,UACA,CACEE,eAAgBxB,MAElBA,KAAKpB,WACL,CACE2C,WAAAA,aAeNpB,2CAAWC,mBAAEA,oBAAqB,0DAAS,SACnCqB,eAAiB,IAAIC,iBAAQ,+BACjB1B,KAAKqB,cAAcjD,QAAQuD,WAAWX,YAAY,GACtDY,2DAKThD,WAAWF,cAAc7B,4EAAqBoD,UAAUT,OAAO,UAAU,OAG1Ef,WAAaF,oBAAoByB,KAAKpB,WAAWC,gBACjDJ,YAAcA,WAAWS,aAAa,6DAEjCT,wCAAaU,QAAQ,SAG9BmB,KAAKuB,OAAO7B,KAAKpB,iBACZA,WAAWqB,UAAU6B,IAAIhF,oBAExBiF,WAAa/B,KAAKpB,WAAWS,QAAQ0C,WACvCA,aAAexE,WAAkD,GAArCyC,KAAKpB,WAAWS,QAAQgB,WACtD2B,EAAEC,KAAKC,oBAAoBH,YAAY,SAGnCI,MAAQnC,KAAKpB,WAAWS,QAAQ8C,SAClCA,MAAO,CACIjF,SAASkF,eAAe,QAChCnC,UAAU6B,IAAIK,OAGjB5E,WACFC,cACGG,MAAM0E,WACLA,SAASC,cAEWpF,SAASkF,eAAe,QAChCG,MAAMC,SAAW,SACtBH,YAER/D,cAICmE,YAAczC,KAAKpB,WAAWF,cAAc7B,oBAC9CuD,oBAAsBqC,aACxBzD,qBAAqByD,aAAa,GAEpCC,YAAW,KACTD,YAAYxC,UAAUT,OAAO,UAAU,GACnCY,oBACFqC,YAAYE,QAEdlB,eAAemB,YACd,UAEEvB,cAAcjD,QAAQuD,WAAWV,aAUxCpB,kBAAYC,kBAAEA,mBAAoB,EAAtBC,kBAA4BA,mBAAoB,0DAAS,SAC7D0B,eAAiB,IAAIC,iBAAQ,gCAEjB1B,KAAKqB,cAAcjD,QAAQuD,WAAWT,YAAY,GACtDU,8BAKRa,YAAczC,KAAKpB,WAAWF,cAAc7B,kCAClD4F,MAAAA,aAAAA,YAAaxC,UAAUT,OAAO,UAAU,GAEpCiD,YAAYvD,aAAa,+DAEpBuD,2CAActD,QAAQ,eAGzB4C,WAAa/B,KAAKpB,WAAWS,QAAQ0C,WACvCA,YAAchC,oBAAsBxC,WACtCyE,EAAEC,KAAKC,oBAAoBH,YAAY,SAGnCI,MAAQnC,KAAKpB,WAAWS,QAAQ8C,SAClCA,MAAO,CACIjF,SAASkF,eAAe,QAChCnC,UAAUW,OAAOuB,OAGxB7B,KAAKC,KAAKP,KAAKpB,iBACVA,WAAWqB,UAAUW,OAAO9D,cAEjCU,cACGG,MAAM0E,cACLA,SAAS9B,OAELhD,UAAW,CACOL,SAASkF,eAAe,QAChCG,MAAMC,SAAW,cAExBH,YAER/D,YAGCG,WAAaF,oBAAoByB,KAAKpB,WAAWC,IACjDJ,YACFO,qBAAqBP,YAAY,GAEnCiE,YAAW,KACLjE,YAAcqB,mBAChBrB,WAAWkE,QAEblB,eAAemB,YACd,UAEEvB,cAAcjD,QAAQuD,WAAWR,cAMxC0B,mBACM7C,KAAKpB,WAAWqB,UAAUC,SAASpD,mBAChC+C,mBAEAM,sCAQPxD,UAAUmC,SAAS0C,iBACjBA,eAAe3B,0CASMiD,oBACvBnG,UAAUmC,SAAS0C,iBACbA,iBAAmBsB,oBAIvBtB,eAAe3B,iDAmCfkD,iBAAoBC,UACjBA,SAASC,aAAeD,SAASE,aAQpCC,kBAAqBC,eACrBA,aAAa/D,QAAQgE,SACvBnG,SAASoG,iBAAkB,GAAEzG,kCAAkCuG,aAAa/D,QAAQgE,YAAYvE,SAASyE,MACvGA,IAAIlE,QAAQmE,UAAW,KAEzBJ,aAAa/D,QAAQmE,UAAW,IAvCnB,YACTrG,KAAOD,SAASwB,cAAc,QAC9B+E,aAAevG,SAASwB,cAAc7B,wBACxC4G,aAAc,OAEVC,YAAcxG,SAASwB,cAAc7B,oBAAsB,IAAMC,sBAClEiG,iBAAiBU,eAAiBC,cACrCA,YAAYnB,MAAMoB,YAAc,KAElCF,aAAaxF,iBAAiB,UAAU,KAClCwF,aAAahD,WAAamD,OAAOC,YACnC1G,KAAK8C,UAAU6B,IAAIhF,kBAEnBK,KAAK8C,UAAUW,OAAO9D,uBAiI9BgH,GAnF0B,MAExB5G,SAASe,iBAAiB,SAAUC,UAC5BkF,aAAelF,EAAEmF,OAAOU,QAAQlH,wBAClCuG,cAAgBA,aAAa/D,QAAQgE,OAAQ,CAC/CnF,EAAEC,uBACI6F,aAAe9G,SAASkF,eAAegB,aAAa/D,QAAQgE,QAC5D7B,eAAiBpD,QAAQ6F,yBAAyBD,cACxDb,kBAAkBC,cAElB5B,eAAeqB,yBAGXqB,iBAAmBhG,EAAEmF,OAAOU,QAAQlH,sBACtCqH,kBAAoBA,iBAAiB7E,QAAQgE,OAAQ,CACvDnF,EAAEC,uBACI6F,aAAe9G,SAASkF,eAAe8B,iBAAiB7E,QAAQgE,QAChE7B,eAAiBpD,QAAQ6F,yBAAyBD,cACxDb,kBAAkBC,cAElB5B,eAAerB,mBAGXgE,kBAAoBjG,EAAEmF,OAAOU,QAAQlH,uBACvCsH,mBAAqBA,kBAAkB9E,QAAQgE,OAAQ,CACzDnF,EAAEC,uBACI6F,aAAe9G,SAASkF,eAAe+B,kBAAkB9E,QAAQgE,QAChDjF,QAAQ6F,yBAAyBD,cAEzCnE,cAzCQwD,CAAAA,eACrBe,eAAiBlH,SAASwB,cAAe,GAAE7B,kCAAkCwG,iCAC/Ee,gBACFA,eAAezB,SAuCb0B,CAAoBF,kBAAkB9E,QAAQgE,YAKlDnG,SAASe,iBAAiBG,QAAQuD,WAAWX,YAAa9C,IAvkBrClB,mBACED,aA0kBrBqB,QAAQkG,kBAAkBpG,EAAEqG,OAAO/C,yBAI/BgD,YAAe,GAAE3H,wBAAwBA,sBAAsBA,qBACrEK,SAASe,iBAAiB,YAAaC,UAC/Ba,OAASb,EAAEmF,OAAOU,QAAQS,kBACaC,KAAzC1F,MAAAA,cAAAA,OAAQM,QAAQK,uBAClBC,oBAAoBZ,WAiCxB6E,OAAO3F,iBAAiB,UAAU,oBA7BJ,QACxBV,UAAW,KACTmH,SAAU,EACd/H,UAAUmC,SAAS0C,iBACjB7C,sBAAsB6C,eAAe5C,YACjC4C,eAAeX,SACbW,eAAeV,cACjBU,eAAe3B,cAEf6E,SAAU,MAKZA,SACFlH,cACGG,MAAM0E,UAAaA,SAASC,SAC5BhE,aAGL3B,UAAUmC,SAAS0C,iBAphBK5C,IAAAA,WACZ,EADYA,WAqhBD4C,eAAe5C,YAphBdF,cAAc7B,oBAAqB0B,oBAAoBK,WAAWC,KACtFC,SAASC,SACVA,QAGLY,oBAAoBZ,cAihBlBvB,cACGG,MAAM0E,UAAaA,SAAS9B,SAC5BjC,UAI2D,OAIpEqG,UAEgBzH,SAASoG,iBAAiBzG,mBAClCiC,SAASF,YAAeR,QAAQ6F,yBAAyBrF"}