{"version":3,"file":"drawers.min.js","sources":["../src/drawers.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Toggling the visibility of the secondary navigation on mobile.\r\n *\r\n * @module     theme_boost/drawers\r\n * @copyright  2021 Bas Brands\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\nimport ModalBackdrop from \"core/modal_backdrop\";\r\nimport Templates from \"core/templates\";\r\nimport * as Aria from \"core/aria\";\r\nimport { dispatchEvent } from \"core/event_dispatcher\";\r\nimport { debounce } from \"core/utils\";\r\nimport Pending from \"core/pending\";\r\n// The jQuery module is only used for interacting with Boostrap 4. It can we removed when MDL-71979 is integrated.\r\nimport jQuery from \"jquery\";\r\n\r\nlet backdropPromise = null;\r\n\r\nconst drawerMap = new Map();\r\n\r\nconst SELECTORS = {\r\n  BUTTONS: '[data-toggler=\"drawers\"]',\r\n  CLOSEBTN: '[data-toggler=\"drawers\"][data-action=\"closedrawer\"]',\r\n  OPENBTN: '[data-toggler=\"drawers\"][data-action=\"opendrawer\"]',\r\n  TOGGLEBTN: '[data-toggler=\"drawers\"][data-action=\"toggle\"]',\r\n  DRAWERS: '[data-region=\"fixed-drawer\"]',\r\n  CONTAINER: \"#page.drawers\",\r\n  DRAWERCONTENT: \".drawercontent\",\r\n};\r\n\r\nconst CLASSES = {\r\n  SCROLLED: \"scrolled\",\r\n  SHOW: \"show\",\r\n  NOTINITIALISED: \"not-initialized\",\r\n  TOGGLERIGHT: \".drawer-right-toggle\",\r\n};\r\n\r\n/**\r\n * Maximum sizes for breakpoints. This needs to correspond with Bootstrap\r\n * Breakpoints\r\n *\r\n * @private\r\n */\r\nconst sizes = {\r\n  medium: 991,\r\n  large: 1400,\r\n};\r\n\r\n/**\r\n * Get the current body width.\r\n *\r\n * @returns {number} the current body width.\r\n * @private\r\n */\r\nconst getCurrentWidth = () => {\r\n  const DomRect = document.body.getBoundingClientRect();\r\n  return DomRect.x + DomRect.width;\r\n};\r\n\r\n/**\r\n * Check if the user uses a small size browser.\r\n *\r\n * @returns {boolean} true if the body is smaller than sizes.medium max size.\r\n * @private\r\n */\r\nconst isSmall = () => {\r\n  const browserWidth = getCurrentWidth();\r\n  return browserWidth < sizes.medium;\r\n};\r\n\r\n/**\r\n * Check if the user uses a large size browser.\r\n *\r\n * @returns {boolean} true if the body is smaller than sizes.large max size.\r\n * @private\r\n */\r\nconst isLarge = () => {\r\n  const browserWidth = getCurrentWidth();\r\n  return browserWidth >= sizes.large;\r\n};\r\n\r\n/**\r\n * Add a backdrop to the page.\r\n *\r\n * @returns {Promise} rendering of modal backdrop.\r\n * @private\r\n */\r\nconst getBackdrop = () => {\r\n  if (!backdropPromise) {\r\n    backdropPromise = Templates.render(\"core/modal_backdrop\", {})\r\n      .then((html) => new ModalBackdrop(html))\r\n      .then((modalBackdrop) => {\r\n        modalBackdrop\r\n          .getAttachmentPoint()\r\n          .get(0)\r\n          .addEventListener(\"click\", (e) => {\r\n            e.preventDefault();\r\n            Drawers.closeAllDrawers();\r\n          });\r\n        return modalBackdrop;\r\n      })\r\n      .catch();\r\n  }\r\n  return backdropPromise;\r\n};\r\n\r\n/**\r\n * Get the button element to open a specific drawer.\r\n *\r\n * @param {String} drawerId the drawer element Id\r\n * @return {HTMLElement|undefined} the open button element\r\n * @private\r\n */\r\nconst getDrawerOpenButton = (drawerId) => {\r\n  let openButton = document.querySelector(`${SELECTORS.OPENBTN}[data-target=\"${drawerId}\"]`);\r\n  if (!openButton) {\r\n    openButton = document.querySelector(`${SELECTORS.TOGGLEBTN}[data-target=\"${drawerId}\"]`);\r\n  }\r\n  return openButton;\r\n};\r\n\r\n/**\r\n * Disable drawer tooltips.\r\n *\r\n * @param {HTMLElement} drawerNode the drawer main node\r\n * @private\r\n */\r\nconst disableDrawerTooltips = (drawerNode) => {\r\n  const buttons = [drawerNode.querySelector(SELECTORS.CLOSEBTN), getDrawerOpenButton(drawerNode.id)];\r\n  buttons.forEach((button) => {\r\n    if (!button) {\r\n      return;\r\n    }\r\n    disableButtonTooltip(button);\r\n  });\r\n};\r\n\r\n/**\r\n * Disable the button tooltips.\r\n *\r\n * @param {HTMLElement} button the button element\r\n * @param {boolean} enableOnBlur if the tooltip must be re-enabled on blur.\r\n * @private\r\n */\r\nconst disableButtonTooltip = (button, enableOnBlur) => {\r\n  if (button.hasAttribute(\"data-original-title\")) {\r\n    // The jQuery is still used in Boostrap 4. It can we removed when MDL-71979 is integrated.\r\n    jQuery(button).tooltip(\"disable\");\r\n    button.setAttribute(\"title\", button.dataset.originalTitle);\r\n  } else {\r\n    button.dataset.disabledToggle = button.dataset.toggle;\r\n    button.removeAttribute(\"data-toggle\");\r\n  }\r\n  if (enableOnBlur) {\r\n    button.dataset.restoreTooltipOnBlur = true;\r\n  }\r\n};\r\n\r\n/**\r\n * Enable drawer tooltips.\r\n *\r\n * @param {HTMLElement} drawerNode the drawer main node\r\n * @private\r\n */\r\nconst enableDrawerTooltips = (drawerNode) => {\r\n  const buttons = [drawerNode.querySelector(SELECTORS.CLOSEBTN), getDrawerOpenButton(drawerNode.id)];\r\n  buttons.forEach((button) => {\r\n    if (!button) {\r\n      return;\r\n    }\r\n    enableButtonTooltip(button);\r\n  });\r\n};\r\n\r\n/**\r\n * Enable the button tooltips.\r\n *\r\n * @param {HTMLElement} button the button element\r\n * @private\r\n */\r\nconst enableButtonTooltip = (button) => {\r\n  // The jQuery is still used in Boostrap 4. It can we removed when MDL-71979 is integrated.\r\n  if (button.hasAttribute(\"data-original-title\")) {\r\n    jQuery(button).tooltip(\"enable\");\r\n    button.removeAttribute(\"title\");\r\n  } else if (button.dataset.disabledToggle) {\r\n    button.dataset.toggle = button.dataset.disabledToggle;\r\n    jQuery(button).tooltip();\r\n  }\r\n  delete button.dataset.restoreTooltipOnBlur;\r\n};\r\n\r\n/**\r\n * Add scroll listeners to a drawer element.\r\n *\r\n * @param {HTMLElement} drawerNode the drawer main node\r\n * @private\r\n */\r\nconst addInnerScrollListener = (drawerNode) => {\r\n  const content = drawerNode.querySelector(SELECTORS.DRAWERCONTENT);\r\n  if (!content) {\r\n    return;\r\n  }\r\n  content.addEventListener(\"scroll\", () => {\r\n    drawerNode.classList.toggle(CLASSES.SCROLLED, content.scrollTop != 0);\r\n  });\r\n};\r\n\r\n/**\r\n * The Drawers class is used to control on-screen drawer elements.\r\n *\r\n * It handles opening, and closing of drawer elements, as well as more detailed behaviours such as closing a drawer when\r\n * another drawer is opened, and supports closing a drawer when the screen is resized.\r\n *\r\n * Drawers are instantiated on page load, and can also be toggled lazily when toggling any drawer toggle, open button,\r\n * or close button.\r\n *\r\n * A range of show and hide events are also dispatched as detailed in the class\r\n * {@link module:theme_boost/drawers#eventTypes eventTypes} object.\r\n *\r\n * @example <caption>Standard usage</caption>\r\n *\r\n * // The module just needs to be included to add drawer support.\r\n * import 'theme_boost/drawers';\r\n *\r\n * @example <caption>Manually open or close any drawer</caption>\r\n *\r\n * import Drawers from 'theme_boost/drawers';\r\n *\r\n * const myDrawer = Drawers.getDrawerInstanceForNode(document.querySelector('.myDrawerNode');\r\n * myDrawer.closeDrawer();\r\n *\r\n * @example <caption>Listen to the before show event and cancel it</caption>\r\n *\r\n * import Drawers from 'theme_boost/drawers';\r\n *\r\n * document.addEventListener(Drawers.eventTypes.drawerShow, e => {\r\n *     // The drawer which will be shown.\r\n *     window.console.log(e.target);\r\n *\r\n *     // The instance of the Drawers class for this drawer.\r\n *     window.console.log(e.detail.drawerInstance);\r\n *\r\n *     // Prevent this drawer from being shown.\r\n *     e.preventDefault();\r\n * });\r\n *\r\n * @example <caption>Listen to the shown event</caption>\r\n *\r\n * document.addEventListener(Drawers.eventTypes.drawerShown, e => {\r\n *     // The drawer which was shown.\r\n *     window.console.log(e.target);\r\n *\r\n *     // The instance of the Drawers class for this drawer.\r\n *     window.console.log(e.detail.drawerInstance);\r\n * });\r\n */\r\nexport default class Drawers {\r\n  /**\r\n   * The underlying HTMLElement which is controlled.\r\n   */\r\n  drawerNode = null;\r\n\r\n  constructor(drawerNode) {\r\n    this.drawerNode = drawerNode;\r\n\r\n    if (isSmall()) {\r\n      this.closeDrawer({ focusOnOpenButton: false, updatePreferences: false });\r\n    }\r\n\r\n    if (this.drawerNode.classList.contains(CLASSES.SHOW)) {\r\n      this.openDrawer({ focusOnCloseButton: false });\r\n    } else if (this.drawerNode.dataset.forceopen == 1) {\r\n      if (!isSmall()) {\r\n        this.openDrawer({ focusOnCloseButton: false });\r\n      }\r\n    } else {\r\n      Aria.hide(this.drawerNode);\r\n    }\r\n\r\n    // Disable tooltips in small screens.\r\n    if (isSmall()) {\r\n      disableDrawerTooltips(this.drawerNode);\r\n    }\r\n\r\n    addInnerScrollListener(this.drawerNode);\r\n\r\n    drawerMap.set(drawerNode, this);\r\n\r\n    drawerNode.classList.remove(CLASSES.NOTINITIALISED);\r\n  }\r\n\r\n  /**\r\n   * Whether the drawer is open.\r\n   *\r\n   * @returns {boolean}\r\n   */\r\n  get isOpen() {\r\n    return this.drawerNode.classList.contains(CLASSES.SHOW);\r\n  }\r\n\r\n  /**\r\n   * Whether the drawer should close when the window is resized\r\n   *\r\n   * @returns {boolean}\r\n   */\r\n  get closeOnResize() {\r\n    return !!parseInt(this.drawerNode.dataset.closeOnResize);\r\n  }\r\n\r\n  /**\r\n   * The list of event types.\r\n   *\r\n   * @static\r\n   * @property {String} drawerShow See {@link event:theme_boost/drawers:show}\r\n   * @property {String} drawerShown See {@link event:theme_boost/drawers:shown}\r\n   * @property {String} drawerHide See {@link event:theme_boost/drawers:hide}\r\n   * @property {String} drawerHidden See {@link event:theme_boost/drawers:hidden}\r\n   */\r\n  static eventTypes = {\r\n    /**\r\n     * An event triggered before a drawer is shown.\r\n     *\r\n     * @event theme_boost/drawers:show\r\n     * @type {CustomEvent}\r\n     * @property {HTMLElement} target The drawer that will be opened.\r\n     */\r\n    drawerShow: \"theme_boost/drawers:show\",\r\n\r\n    /**\r\n     * An event triggered after a drawer is shown.\r\n     *\r\n     * @event theme_boost/drawers:shown\r\n     * @type {CustomEvent}\r\n     * @property {HTMLElement} target The drawer that was be opened.\r\n     */\r\n    drawerShown: \"theme_boost/drawers:shown\",\r\n\r\n    /**\r\n     * An event triggered before a drawer is hidden.\r\n     *\r\n     * @event theme_boost/drawers:hide\r\n     * @type {CustomEvent}\r\n     * @property {HTMLElement} target The drawer that will be hidden.\r\n     */\r\n    drawerHide: \"theme_boost/drawers:hide\",\r\n\r\n    /**\r\n     * An event triggered after a drawer is hidden.\r\n     *\r\n     * @event theme_boost/drawers:hidden\r\n     * @type {CustomEvent}\r\n     * @property {HTMLElement} target The drawer that was be hidden.\r\n     */\r\n    drawerHidden: \"theme_boost/drawers:hidden\",\r\n  };\r\n\r\n  /**\r\n   * Get the drawer instance for the specified node\r\n   *\r\n   * @param {HTMLElement} drawerNode\r\n   * @returns {module:theme_boost/drawers}\r\n   */\r\n  static getDrawerInstanceForNode(drawerNode) {\r\n    if (!drawerMap.has(drawerNode)) {\r\n      new Drawers(drawerNode);\r\n    }\r\n\r\n    return drawerMap.get(drawerNode);\r\n  }\r\n\r\n  /**\r\n   * Dispatch a drawer event.\r\n   *\r\n   * @param {string} eventname the event name\r\n   * @param {boolean} cancelable if the event is cancelable\r\n   * @returns {CustomEvent} the resulting custom event\r\n   */\r\n  dispatchEvent(eventname, cancelable = false) {\r\n    return dispatchEvent(\r\n      eventname,\r\n      {\r\n        drawerInstance: this,\r\n      },\r\n      this.drawerNode,\r\n      {\r\n        cancelable,\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Open the drawer.\r\n   *\r\n   * By default, openDrawer sets the page focus to the close drawer button. However, when a drawer is open at page\r\n   * load, this represents an accessibility problem as the initial focus changes without any user interaction. The\r\n   * focusOnCloseButton parameter can be set to false to prevent this behaviour.\r\n   *\r\n   * @param {object} args\r\n   * @param {boolean} [args.focusOnCloseButton=true] Whether to alter page focus when opening the drawer\r\n   */\r\n  openDrawer({ focusOnCloseButton = true } = {}) {\r\n    const pendingPromise = new Pending(\"theme_boost/drawers:open\");\r\n    const showEvent = this.dispatchEvent(Drawers.eventTypes.drawerShow, true);\r\n    if (showEvent.defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // Hide close button while the drawer is showing to prevent glitchy effects.\r\n    this.drawerNode.querySelector(SELECTORS.CLOSEBTN)?.classList.toggle(\"hidden\", true);\r\n\r\n    // Remove open tooltip if still visible.\r\n    let openButton = getDrawerOpenButton(this.drawerNode.id);\r\n    if (openButton && openButton.hasAttribute(\"data-original-title\")) {\r\n      // The jQuery is still used in Boostrap 4. It can we removed when MDL-71979 is integrated.\r\n      jQuery(openButton)?.tooltip(\"hide\");\r\n    }\r\n\r\n    Aria.unhide(this.drawerNode);\r\n    this.drawerNode.classList.add(CLASSES.SHOW);\r\n\r\n    const preference = this.drawerNode.dataset.preference;\r\n    if (preference && !isSmall() && this.drawerNode.dataset.forceopen != 1) {\r\n      M.util.set_user_preference(preference, true);\r\n    }\r\n\r\n    const state = this.drawerNode.dataset.state;\r\n    if (state) {\r\n      const page = document.getElementById(\"page\");\r\n      page.classList.add(state);\r\n    }\r\n\r\n    if (isSmall()) {\r\n      getBackdrop()\r\n        .then((backdrop) => {\r\n          backdrop.show();\r\n\r\n          const pageWrapper = document.getElementById(\"page\");\r\n          pageWrapper.style.overflow = \"hidden\";\r\n          return backdrop;\r\n        })\r\n        .catch();\r\n    }\r\n\r\n    // Show close button once the drawer is fully opened.\r\n    const closeButton = this.drawerNode.querySelector(SELECTORS.CLOSEBTN);\r\n    if (focusOnCloseButton && closeButton) {\r\n      disableButtonTooltip(closeButton, true);\r\n    }\r\n    setTimeout(() => {\r\n      closeButton.classList.toggle(\"hidden\", false);\r\n      if (focusOnCloseButton) {\r\n        closeButton.focus();\r\n      }\r\n      pendingPromise.resolve();\r\n    }, 300);\r\n\r\n    this.dispatchEvent(Drawers.eventTypes.drawerShown);\r\n  }\r\n\r\n  /**\r\n   * Close the drawer.\r\n   *\r\n   * @param {object} args\r\n   * @param {boolean} [args.focusOnOpenButton=true] Whether to alter page focus when opening the drawer\r\n   * @param {boolean} [args.updatePreferences=true] Whether to update the user prewference\r\n   */\r\n  closeDrawer({ focusOnOpenButton = true, updatePreferences = true } = {}) {\r\n    const pendingPromise = new Pending(\"theme_boost/drawers:close\");\r\n\r\n    const hideEvent = this.dispatchEvent(Drawers.eventTypes.drawerHide, true);\r\n    if (hideEvent.defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // Hide close button while the drawer is hiding to prevent glitchy effects.\r\n    const closeButton = this.drawerNode.querySelector(SELECTORS.CLOSEBTN);\r\n    closeButton?.classList.toggle(\"hidden\", true);\r\n    // Remove the close button tooltip if visible.\r\n    if (closeButton.hasAttribute(\"data-original-title\")) {\r\n      // The jQuery is still used in Boostrap 4. It can we removed when MDL-71979 is integrated.\r\n      jQuery(closeButton)?.tooltip(\"hide\");\r\n    }\r\n\r\n    const preference = this.drawerNode.dataset.preference;\r\n    if (preference && updatePreferences && !isSmall()) {\r\n      M.util.set_user_preference(preference, false);\r\n    }\r\n\r\n    const state = this.drawerNode.dataset.state;\r\n    if (state) {\r\n      const page = document.getElementById(\"page\");\r\n      page.classList.remove(state);\r\n    }\r\n\r\n    Aria.hide(this.drawerNode);\r\n    this.drawerNode.classList.remove(CLASSES.SHOW);\r\n\r\n    getBackdrop()\r\n      .then((backdrop) => {\r\n        backdrop.hide();\r\n\r\n        if (isSmall()) {\r\n          const pageWrapper = document.getElementById(\"page\");\r\n          pageWrapper.style.overflow = \"auto\";\r\n        }\r\n        return backdrop;\r\n      })\r\n      .catch();\r\n\r\n    // Move focus to the open drawer (or toggler) button once the drawer is hidden.\r\n    let openButton = getDrawerOpenButton(this.drawerNode.id);\r\n    if (openButton) {\r\n      disableButtonTooltip(openButton, true);\r\n    }\r\n    setTimeout(() => {\r\n      if (openButton && focusOnOpenButton) {\r\n        openButton.focus();\r\n      }\r\n      pendingPromise.resolve();\r\n    }, 300);\r\n\r\n    this.dispatchEvent(Drawers.eventTypes.drawerHidden);\r\n  }\r\n\r\n  /**\r\n   * Toggle visibility of the drawer.\r\n   */\r\n  toggleVisibility() {\r\n    if (this.drawerNode.classList.contains(CLASSES.SHOW)) {\r\n      this.closeDrawer();\r\n    } else {\r\n      this.openDrawer();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Close all drawers.\r\n   */\r\n  static closeAllDrawers() {\r\n    drawerMap.forEach((drawerInstance) => {\r\n      drawerInstance.closeDrawer();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Close all drawers except for the specified drawer.\r\n   *\r\n   * @param {module:theme_boost/drawers} comparisonInstance\r\n   */\r\n  static closeOtherDrawers(comparisonInstance) {\r\n    drawerMap.forEach((drawerInstance) => {\r\n      if (drawerInstance === comparisonInstance) {\r\n        return;\r\n      }\r\n\r\n      drawerInstance.closeDrawer();\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Activate the scroller helper for the drawer layout.\r\n *\r\n * @private\r\n */\r\nconst scroller = () => {\r\n  const body = document.querySelector(\"body\");\r\n  const drawerLayout = document.querySelector(SELECTORS.CONTAINER);\r\n  if (drawerLayout) {\r\n    // If there is not visible scrollbar then remove extra margin from right drawer.\r\n    const drawerRight = document.querySelector(SELECTORS.CONTAINER + \" \" + CLASSES.TOGGLERIGHT);\r\n    if (!scrollbarVisible(drawerLayout) && drawerRight) {\r\n      drawerRight.style.marginRight = \"0\";\r\n    }\r\n    drawerLayout.addEventListener(\"scroll\", () => {\r\n      if (drawerLayout.scrollTop >= window.innerHeight) {\r\n        body.classList.add(CLASSES.SCROLLED);\r\n      } else {\r\n        body.classList.remove(CLASSES.SCROLLED);\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Check if there is a visible scrollbar in the given html element.\r\n *\r\n * @param {object} htmlNode The html element.\r\n * @returns {boolean} true if the scroll height is greater than client height.\r\n */\r\nconst scrollbarVisible = (htmlNode) => {\r\n  return htmlNode.scrollHeight > htmlNode.clientHeight;\r\n};\r\n\r\n/**\r\n * Set the last used attribute for the last used toggle button for a drawer.\r\n *\r\n * @param {object} toggleButton The clicked button.\r\n */\r\nconst setLastUsedToggle = (toggleButton) => {\r\n  if (toggleButton.dataset.target) {\r\n    document.querySelectorAll(`${SELECTORS.BUTTONS}[data-target=\"${toggleButton.dataset.target}\"]`).forEach((btn) => {\r\n      btn.dataset.lastused = false;\r\n    });\r\n    toggleButton.dataset.lastused = true;\r\n  }\r\n};\r\n\r\n/**\r\n * Set the focus to the last used button to open this drawer.\r\n * @param {string} target The drawer target.\r\n */\r\nconst focusLastUsedToggle = (target) => {\r\n  const lastUsedButton = document.querySelector(`${SELECTORS.BUTTONS}[data-target=\"${target}\"][data-lastused=\"true\"`);\r\n  if (lastUsedButton) {\r\n    lastUsedButton.focus();\r\n  }\r\n};\r\n\r\n/**\r\n * Register the event listeners for the drawer.\r\n *\r\n * @private\r\n */\r\nconst registerListeners = () => {\r\n  // Listen for show/hide events.\r\n  document.addEventListener(\"click\", (e) => {\r\n    const toggleButton = e.target.closest(SELECTORS.TOGGLEBTN);\r\n    if (toggleButton && toggleButton.dataset.target) {\r\n      e.preventDefault();\r\n      const targetDrawer = document.getElementById(toggleButton.dataset.target);\r\n      const drawerInstance = Drawers.getDrawerInstanceForNode(targetDrawer);\r\n      setLastUsedToggle(toggleButton);\r\n\r\n      drawerInstance.toggleVisibility();\r\n    }\r\n\r\n    const openDrawerButton = e.target.closest(SELECTORS.OPENBTN);\r\n    if (openDrawerButton && openDrawerButton.dataset.target) {\r\n      e.preventDefault();\r\n      const targetDrawer = document.getElementById(openDrawerButton.dataset.target);\r\n      const drawerInstance = Drawers.getDrawerInstanceForNode(targetDrawer);\r\n      setLastUsedToggle(toggleButton);\r\n\r\n      drawerInstance.openDrawer();\r\n    }\r\n\r\n    const closeDrawerButton = e.target.closest(SELECTORS.CLOSEBTN);\r\n    if (closeDrawerButton && closeDrawerButton.dataset.target) {\r\n      e.preventDefault();\r\n      const targetDrawer = document.getElementById(closeDrawerButton.dataset.target);\r\n      const drawerInstance = Drawers.getDrawerInstanceForNode(targetDrawer);\r\n\r\n      drawerInstance.closeDrawer();\r\n      focusLastUsedToggle(closeDrawerButton.dataset.target);\r\n    }\r\n  });\r\n\r\n  // Close drawer when another drawer opens.\r\n  document.addEventListener(Drawers.eventTypes.drawerShow, (e) => {\r\n    if (isLarge()) {\r\n      return;\r\n    }\r\n    Drawers.closeOtherDrawers(e.detail.drawerInstance);\r\n  });\r\n\r\n  // Tooglers and openers blur listeners.\r\n  const btnSelector = `${SELECTORS.TOGGLEBTN}, ${SELECTORS.OPENBTN}, ${SELECTORS.CLOSEBTN}`;\r\n  document.addEventListener(\"focusout\", (e) => {\r\n    const button = e.target.closest(btnSelector);\r\n    if (button?.dataset.restoreTooltipOnBlur !== undefined) {\r\n      enableButtonTooltip(button);\r\n    }\r\n  });\r\n\r\n  const closeOnResizeListener = () => {\r\n    if (isSmall()) {\r\n      let anyOpen = false;\r\n      drawerMap.forEach((drawerInstance) => {\r\n        disableDrawerTooltips(drawerInstance.drawerNode);\r\n        if (drawerInstance.isOpen) {\r\n          if (drawerInstance.closeOnResize) {\r\n            drawerInstance.closeDrawer();\r\n          } else {\r\n            anyOpen = true;\r\n          }\r\n        }\r\n      });\r\n\r\n      if (anyOpen) {\r\n        getBackdrop()\r\n          .then((backdrop) => backdrop.show())\r\n          .catch();\r\n      }\r\n    } else {\r\n      drawerMap.forEach((drawerInstance) => {\r\n        enableDrawerTooltips(drawerInstance.drawerNode);\r\n      });\r\n      getBackdrop()\r\n        .then((backdrop) => backdrop.hide())\r\n        .catch();\r\n    }\r\n  };\r\n\r\n  window.addEventListener(\"resize\", debounce(closeOnResizeListener, 400));\r\n};\r\n\r\nscroller();\r\nregisterListeners();\r\n\r\nconst drawers = document.querySelectorAll(SELECTORS.DRAWERS);\r\ndrawers.forEach((drawerNode) => Drawers.getDrawerInstanceForNode(drawerNode));\r\n"],"names":["backdropPromise","drawerMap","Map","SELECTORS","CLASSES","sizes","getCurrentWidth","DomRect","document","body","getBoundingClientRect","x","width","isSmall","getBackdrop","Templates","render","then","html","ModalBackdrop","modalBackdrop","getAttachmentPoint","get","addEventListener","e","preventDefault","Drawers","closeAllDrawers","catch","getDrawerOpenButton","drawerId","openButton","querySelector","disableDrawerTooltips","drawerNode","id","forEach","button","disableButtonTooltip","enableOnBlur","hasAttribute","tooltip","setAttribute","dataset","originalTitle","disabledToggle","toggle","removeAttribute","restoreTooltipOnBlur","enableButtonTooltip","constructor","closeDrawer","focusOnOpenButton","updatePreferences","this","classList","contains","openDrawer","focusOnCloseButton","forceopen","Aria","hide","content","scrollTop","addInnerScrollListener","set","remove","isOpen","closeOnResize","parseInt","has","dispatchEvent","eventname","cancelable","drawerInstance","pendingPromise","Pending","eventTypes","drawerShow","defaultPrevented","unhide","add","preference","M","util","set_user_preference","state","getElementById","backdrop","show","style","overflow","closeButton","setTimeout","focus","resolve","drawerShown","drawerHide","drawerHidden","toggleVisibility","comparisonInstance","scrollbarVisible","htmlNode","scrollHeight","clientHeight","setLastUsedToggle","toggleButton","target","querySelectorAll","btn","lastused","drawerLayout","drawerRight","marginRight","window","innerHeight","scroller","closest","targetDrawer","getDrawerInstanceForNode","openDrawerButton","closeDrawerButton","lastUsedButton","focusLastUsedToggle","closeOtherDrawers","detail","btnSelector","undefined","anyOpen","registerListeners"],"mappings":"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"}