{"version":3,"file":"drawer.min.js","sources":["../src/drawer.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Contain the logic for a drawer.\n *\n * @module theme_boost/drawer\n * @copyright  2016 Damyon Wiese\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([\"jquery\", \"core/custom_interaction_events\", \"core/log\", \"core/pubsub\", \"core/aria\"], function (\n  $,\n  CustomEvents,\n  Log,\n  PubSub,\n  Aria\n) {\n  var SELECTORS = {\n    TOGGLE_REGION: '[data-region=\"drawer-toggle\"]',\n    TOGGLE_ACTION: '[data-action=\"toggle-drawer\"]',\n    TOGGLE_TARGET: \"aria-controls\",\n    TOGGLE_SIDE: \"left\",\n    BODY: \"body\",\n    SECTION: '.list-group-item[href*=\"#section-\"]',\n    DRAWER: \"#nav-drawer\",\n  };\n\n  var small = $(document).width() < 768;\n\n  /**\n   * Constructor for the Drawer.\n   */\n  var Drawer = function () {\n    if (!$(SELECTORS.TOGGLE_REGION).length) {\n      Log.debug(\"Page is missing a drawer region\");\n    }\n    if (!$(SELECTORS.TOGGLE_ACTION).length) {\n      Log.debug(\"Page is missing a drawer toggle link\");\n    }\n    $(SELECTORS.TOGGLE_REGION).each(\n      function (index, ele) {\n        var trigger = $(ele).find(SELECTORS.TOGGLE_ACTION);\n        var drawerid = trigger.attr(\"aria-controls\");\n        var drawer = $(document.getElementById(drawerid));\n        var hidden = trigger.attr(\"aria-expanded\") == \"false\";\n        var side = trigger.attr(\"data-side\");\n        var body = $(SELECTORS.BODY);\n        var preference = trigger.attr(\"data-preference\");\n        if (small) {\n          M.util.set_user_preference(preference, \"false\");\n        }\n\n        drawer.on(\"mousewheel DOMMouseScroll\", this.preventPageScroll);\n\n        if (!hidden) {\n          body.addClass(\"drawer-open-\" + side);\n          trigger.attr(\"aria-expanded\", \"true\");\n        } else {\n          trigger.attr(\"aria-expanded\", \"false\");\n        }\n      }.bind(this)\n    );\n\n    this.registerEventListeners();\n    if (small) {\n      this.closeAll();\n    }\n  };\n\n  Drawer.prototype.closeAll = function () {\n    $(SELECTORS.TOGGLE_REGION).each(function (index, ele) {\n      var trigger = $(ele).find(SELECTORS.TOGGLE_ACTION);\n      var side = trigger.attr(\"data-side\");\n      var body = $(SELECTORS.BODY);\n      var drawerid = trigger.attr(\"aria-controls\");\n      var drawer = $(document.getElementById(drawerid));\n      var preference = trigger.attr(\"data-preference\");\n\n      trigger.attr(\"aria-expanded\", \"false\");\n      body.removeClass(\"drawer-open-\" + side);\n      Aria.hide(drawer.get());\n      drawer.addClass(\"closed\");\n      if (!small) {\n        M.util.set_user_preference(preference, \"false\");\n      }\n    });\n  };\n\n  /**\n   * Open / close the blocks drawer.\n   *\n   * @method toggleDrawer\n   * @param {Event} e\n   */\n  Drawer.prototype.toggleDrawer = function (e) {\n    var trigger = $(e.target).closest(\"[data-action=toggle-drawer]\");\n    var drawerid = trigger.attr(\"aria-controls\");\n    var drawer = $(document.getElementById(drawerid));\n    var body = $(SELECTORS.BODY);\n    var side = trigger.attr(\"data-side\");\n    var preference = trigger.attr(\"data-preference\");\n    if (small) {\n      M.util.set_user_preference(preference, \"false\");\n    }\n\n    body.addClass(\"drawer-ease\");\n    var open = trigger.attr(\"aria-expanded\") == \"true\";\n    if (!open) {\n      // Open.\n      trigger.attr(\"aria-expanded\", \"true\");\n      Aria.unhide(drawer.get());\n      drawer.focus();\n      body.addClass(\"drawer-open-\" + side);\n      drawer.removeClass(\"closed\");\n      if (!small) {\n        M.util.set_user_preference(preference, \"true\");\n      }\n    } else {\n      // Close.\n      body.removeClass(\"drawer-open-\" + side);\n      trigger.attr(\"aria-expanded\", \"false\");\n      drawer\n        .addClass(\"closed\")\n        .delay(500)\n        .queue(function () {\n          // Ensure that during the delay, the drawer wasn't re-opened.\n          if ($(this).hasClass(\"closed\")) {\n            Aria.hide(this);\n          }\n          $(this).dequeue();\n        });\n      if (!small) {\n        M.util.set_user_preference(preference, \"false\");\n      }\n    }\n\n    // Publish an event to tell everything that the drawer has been toggled.\n    // The drawer transitions closed so another event will fire once teh transition\n    // has completed.\n    PubSub.publish(\"nav-drawer-toggle-start\", open);\n  };\n\n  /**\n   * Prevent the page from scrolling when the drawer is at max scroll.\n   *\n   * @method preventPageScroll\n   * @param  {Event} e\n   */\n  Drawer.prototype.preventPageScroll = function (e) {\n    var delta = e.wheelDelta || (e.originalEvent && e.originalEvent.wheelDelta) || -e.originalEvent.detail,\n      bottomOverflow = this.scrollTop + $(this).outerHeight() - this.scrollHeight >= 0,\n      topOverflow = this.scrollTop <= 0;\n\n    if ((delta < 0 && bottomOverflow) || (delta > 0 && topOverflow)) {\n      e.preventDefault();\n    }\n  };\n\n  /**\n   * Set up all of the event handling for the modal.\n   *\n   * @method registerEventListeners\n   */\n  Drawer.prototype.registerEventListeners = function () {\n    $(SELECTORS.TOGGLE_ACTION).each(\n      function (index, element) {\n        CustomEvents.define($(element), [CustomEvents.events.activate]);\n        $(element).on(\n          CustomEvents.events.activate,\n          function (e, data) {\n            this.toggleDrawer(data.originalEvent);\n            data.originalEvent.preventDefault();\n          }.bind(this)\n        );\n      }.bind(this)\n    );\n\n    $(SELECTORS.SECTION).click(\n      function () {\n        if (small) {\n          this.closeAll();\n        }\n      }.bind(this)\n    );\n\n    // Publish an event to tell everything that the drawer completed the transition\n    // to either an open or closed state.\n    $(SELECTORS.DRAWER).on(\"webkitTransitionEnd msTransitionEnd transitionend\", function (e) {\n      var drawer = $(e.target).closest(SELECTORS.DRAWER);\n      // Note: aria-hidden is either present, or absent. It should not be set to false.\n      var open = !!drawer.attr(\"aria-hidden\");\n      PubSub.publish(\"nav-drawer-toggle-end\", open);\n    });\n  };\n\n  return {\n    init: function () {\n      return new Drawer();\n    },\n  };\n});\n"],"names":["define","$","CustomEvents","Log","PubSub","Aria","SELECTORS","small","document","width","Drawer","length","debug","each","index","ele","trigger","find","drawerid","attr","drawer","getElementById","hidden","side","body","preference","M","util","set_user_preference","on","this","preventPageScroll","addClass","bind","registerEventListeners","closeAll","prototype","removeClass","hide","get","toggleDrawer","e","target","closest","open","delay","queue","hasClass","dequeue","unhide","focus","publish","delta","wheelDelta","originalEvent","detail","bottomOverflow","scrollTop","outerHeight","scrollHeight","topOverflow","preventDefault","element","events","activate","data","click","init"],"mappings":"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"}